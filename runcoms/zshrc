#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

export EDITOR='vim'

# Add NVM path
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm

# Add /bin and /node_modules/.bin to path for every directory
path=(
  ./bin
  ./node_modules/.bin
  $path
)

# Add path for Yarn
export PATH="$PATH:`yarn global bin`"
export PATH="$PATH:$HOME/.config/yarn/global/node_modules/.bin"

# Add path for VS Code
export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

# Add auto completion for /bin path
zstyle -e ':completion:*' command-path \
  '[[ -d $PWD/bin ]] && reply=($PWD/bin $path)'

# Add auto completion for node_modules/.bin path
zstyle -e ':completion:*' command-path \
  '[[ -d $PWD/node_modules/.bin ]] && reply=($PWD/node_modules/.bin $path)'

# Use Neovim where available
if type nvim > /dev/null 2>&1; then
  alias vim='nvim'
  alias vi='nvim'
fi

# Disable zsh autocorrect
unsetopt correct

# Setting fd as the default source for fzf
export FZF_DEFAULT_COMMAND='rg --files --hidden'

# WSL ONLY
if [ -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
  export NEOVIM_WIN_DIR="/mnt/c/tools/neovim/Neovim/bin"
fi

# --------------------
# Keybindings
# --------------------

# Add control + r history searching
bindkey '^R' history-incremental-search-backward

# zsh-autosuggestions - accept suggestion
bindkey '^e' end-of-line
bindkey '^f' forward-word

# Alt + arrow
bindkey '^[[1;3D' backward-word
bindkey '^[[1;3C' forward-word

# Aliases and Functions

# Setup aliases

# Clear screen
alias C='tmux clear-history && clear'
alias c='clear'

# Run git lg alias instead of zprezto default
alias gl='git lg'

# Rename tmux window
alias rename='tmux rename-window "${PWD##*/}"'

# Notes (open markdown docs in vscode)

# WSL ONLY
if [ -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
  alias mntnas='sudo mount -t drvfs Y: /mnt/important'
  alias notes='code /mnt/d/Dropbox/Documents\ -\ Simon/Markdown/'
  alias markdown='cd /mnt/d/Dropbox/Documents\ -\ Simon/Markdown/'
else
  alias notes='code ~/Dropbox/Documents\ -\ Simon/Markdown/'
  alias markdown='code ~/Dropbox/Documents\ -\ Simon/Markdown/'
fi

# List Linked Modules
alias npm-link-global='\ls -F node_modules | sed -n 's/@$//p' | xargs npm ls -g --depth 0'
alias npm-link-local='find node_modules -maxdepth 1 -type l -ls'

# List Global Modules
alias npm-global='npm list -g --depth=0'

# Npm AU register
alias npm-install-au='npm install --registryhttp://registry.npmjs.org.au'

# Neovim nightly
alias vim="~/applications/nvim.appimage"
alias nvim="~/applications/nvim.appimage"

# Copy (yank) branch

if [ -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
  alias yb='git symbolic-ref --short HEAD | clip.exe'
else
  alias yb='git symbolic-ref --short HEAD | pbcopy'
fi

# Scan Ips (assumes 192.168.1.x)
alias ipscan='nmap -sP 192.168.1.0/24'

# Reload zshrc and tmux config
reload() {
  source ~/.zshrc
  echo 'reloaded zshell config'
  tmux source-file ~/.tmux.conf
  echo 'reloaded tmux config'
}

# Find File
findf() {
  find . -and -not -path ./node_modules/* -and -not -path ./.git/* -type f -name "$1"
}

# Find Directory
findd() {
  find . -and -not -path ./node_modules/* -and -not -path ./.git/* -type d -name "$1"
}

# Find Files with ripgrep
# https://github.com/BurntSushi/ripgrep/issues/193
alias rgf='rg --files | rg'

# Setup tmux panes for development
setup() {
  rename
  tmux split-window -h
  tmux resize-pane -R 70
  tmux split
  tmux select-pane -L
  # Open vim with 3 vertical splits and resize to equal width
  sleep .5 # Needed to trigger resize
  vim -O2
}

# --------------------
# Application Specific
# --------------------

# Launch pathfinder app
pf () { open -a "Path Finder.app" $1; }

# Fuzzy Finder shell extensions
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# free up space in docker
docker-clean() {
  echo 'killing running processes'
  docker kill $(docker ps -q)
  echo 'running system prune...'
  docker system prune -a
  echo 'deleting images'
  docker rmi $(docker images -a -q) -f
  echo 'deleting dangling volumes...'
  docker volume rm $(docker volume ls -qf dangling=true)
}

# kill all running docker containers
alias docker-kill='docker kill $(docker ps -q)'

# rbenv (used by neovim)
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

# Add linux brew to path
eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)

# aws-vault compono
export AWS_VAULT_BACKEND=pass
export GPG_TTY=$(tty)

# connect to compono AWS cluster
export KUBECONFIG=$HOME/.kube/config.aws-compono-test

# add Pulumi to the PATH
export PATH=$PATH:$HOME/.pulumi/bin
